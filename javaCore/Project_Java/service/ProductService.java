package DoAn_Java.service;

import DoAn_Java.ArrayList.type;
import DoAn_Java.Controller.Menu;
import DoAn_Java.model.Product;
import Util.Util;
import java.util.*;



public class ProductService {
    Scanner sc = new Scanner(System.in);

    public void showAllProduct(ArrayList<Product> p){
        p.stream().forEach(s-> System.out.println(s));
    }

    public type chooseType(){
        type type = null;
        Menu.menu5();
        int choose = Integer.parseInt(sc.nextLine());
        boolean isCheck = false;
        while (!isCheck){
            switch (choose){
                case 1:
                    type = type.ƒê·ªì_gia_d·ª•ng;
                    isCheck = true;
                    break;
                case 2:
                    type = type.Th·ªùi_trang;
                    isCheck = true;
                    break;
                case 3:
                    type = type.Th·ª±c_Ph·∫©m;
                    isCheck = true;
                    break;
                default:
                    System.out.println("Kh√¥ng c√≥ l·ª±a ch·ªçn n√†y");
                    isCheck = true;
                    break;
            }
        }
        return type;
    }
    public Product chooseID(ArrayList<Product> p,String id){
        for (Product s : p
        ) {
            if (Objects.equals(s.getId(), id)){
                return s;
            }
        }
        return null;
    }

    public Product createProduct(){

        int id = Integer.parseInt(String.valueOf((0)));
        System.out.println("Nh·∫≠p t√™n");
        String name = sc.nextLine();
        System.out.println("Ch·ªçn th·ªÉ lo·∫°i");
        type type = chooseType();
        System.out.println("Gi√° b√°n");
         long sellPrice = Integer.parseInt(sc.nextLine());
        System.out.println("Gi√° nh·∫≠p");
         long buyPrice =Integer.parseInt(sc.nextLine());
        System.out.println("S·ªë l∆∞·ª£ng ƒë√£ b√°n");
         int sellNumber=Integer.parseInt(sc.nextLine());
        System.out.println("T·ªìn kho");
         int inventoryNumber = Integer.parseInt(sc.nextLine());

         return new Product(id,name,type,sellPrice,buyPrice,sellNumber,inventoryNumber);
    }
    public void addNewProduct(ArrayList<Product> p){
        if (p.add(createProduct())){
            System.out.println("Th√™m th√†nh c√¥ng");
        }
        else {
            System.out.println("Th√™m th·∫•t b·∫°i ü•ä");
        }
    }

    public void deleteProduct(ArrayList<Product> p){
        System.out.println("Nh·∫≠p ID s·∫£n ph·∫©m üîç");
        String id = sc.nextLine();
        System.out.println("K·∫øt qu·∫£ t√¨m ki·∫øm  ");
        System.out.println(chooseID(p,id));
        if (p.remove(chooseID(p,id))){
            System.out.println("X√≥a th√†nh c√¥ng");
        }
        else {
            System.out.println("X√≥a th·∫•t b·∫°i");
        }
    }

    public long interestProduct(ArrayList<Product> p) {
        System.out.println("L√£i thu ƒë∆∞·ª£c üìà");
        long interest = 0;
        for (Product s : p
        ) {
            long n = s.getSellPrice() - s.getBuyPrice();
             interest = s.getSellNumber() * n;
            System.out.println( "SP"+s.getId() +"\t \t" + s.getName()+"\t \t" + Util.formatMoney(interest));
        }
        return interest;

    }
    public void searchName(ArrayList<Product> p,String Name){
        int count = 0;
        for (Product s : p
             ) {
            if (Name.equalsIgnoreCase(s.getName())){
                count ++;
                System.out.println(s);
            }
        }
        System.out.println(count + " s·∫£n ph·∫©m ƒë∆∞·ª£c t√¨m th·∫•y ");
    }

    public void getType(ArrayList<Product> a , type type){
        for (Product s : a
        ) {
            if (s.getType().equals(type)){
                System.out.println(s);
            }
        }
    }
    public void printType(ArrayList<Product> a){
        boolean isContinue = true;
        while (isContinue){
            Menu.menu5();
            int choice = Integer.parseInt(sc.nextLine());
            switch (choice){
                case 1:
                    getType(a,type.ƒê·ªì_gia_d·ª•ng);
                    isContinue = false;
                    break;
                case 2:
                    getType(a,type.Th·ªùi_trang);
                    isContinue = false;
                    break;
                case 3:
                    getType(a,type.Th·ª±c_Ph·∫©m);
                    isContinue = false;
                default:
                    System.out.println("Null");
            }

        }}

    public void updatePrice(ArrayList<Product> p){
        System.out.println("Nh·∫≠p ID s·∫£n ph·∫©m c·∫ßn s·ª≠a gi√°  ");
        String id = sc.nextLine();
            System.out.println("K·∫øt qu·∫£ t√¨m ki·∫øm ");
            System.out.println(chooseID(p, id));
            if (chooseID(p,id) == null){
                System.out.println("Kh√¥ng c√≥ s·∫£n ph·∫©m ph√π h·ª£p üß∂");
            }
            else {
            System.out.println("Nh·∫≠p gi√° b√°n m·ªõi üé¢");
            long price = sc.nextLong();
            chooseID(p, id).setSellPrice(price);
            System.out.println("S·∫£n ph·∫©m sau c·∫≠p nh·∫≠t üîä");
            System.out.println(chooseID(p, id));
        }

    }
    public void numberProduct(ArrayList<Product> p){
        int count = 0;
        for (Product s : p
             ) {
         int number = s.getInventoryNumber();
            if (number <= 5){
                count++;
            }
            System.out.println("SP"+s.getId() +"\t \t" + s.getName()+"\t \t" +number);

        }
        System.out.println("üì£ üì£ üì£  "+count+" S·∫£n ph·∫©m s·∫Øp h·∫øt c·∫ßn nh·∫≠p th√™m ");

    }
    public ArrayList<Product> bestSeller(ArrayList<Product> p){
            p.sort(new Comparator<Product>() {
                @Override
                public int compare(Product o1, Product o2) {
                    return o2.getSellNumber() - o1.getSellNumber();
                }
            });
        return p;
        //cach 2
//        p.stream().sorted((o1,o2)->o2.getSellNumber()-o1.getSellNumber())
//                .limit(3)
//                .forEach(s-> System.out.println(s));
    }

    ////////////////////////////////////////
    // Bill

//    historyArray historyArray = new historyArray();
//    ArrayList<TransactionHistory> histories = historyArray.getAllHistory();
//
//
//    public TransactionHistory inputBuy(ArrayList<Product> p){
//        printType(p);
//        System.out.println("Nh·∫≠p id s·∫£n ph·∫©m s·∫Ω nh·∫≠p th√™m");
//        String id = sc.nextLine();
//        if ( chooseID(p,id) != null) {
//            System.out.println("S·ªë l∆∞·ª£ng nh·∫≠p th√™m");
//            int a = Integer.parseInt(sc.nextLine());
//            int amount = a + chooseID(p, id).getInventoryNumber();
//           chooseID(p, id).setInventoryNumber(amount);
//            System.out.println("Ho√†n t·∫•t . \n S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠p");
//            System.out.println(chooseID(p, id));
//
//            long money = (a * chooseID(p, id).getBuyPrice());
//
//            return new TransactionHistory("Nh·∫≠p __ ",chooseID(p, id).getId(), chooseID(p, id).getName(), LocalDate.now(), a, "S·ªë ti·ªÅn c·∫ßn tr·∫£ cho nh√† cung c·∫•p : ", money);
//        }
//        else {
//            System.out.println("kh√¥ng th·∫•y s·∫£n ph·∫©m ph√π h·ª£p");
//        }
//        return null;
//    }
//    public void buy(ArrayList<Product> p){
//        TransactionHistory add = inputBuy(p);
//        histories.add(add);
//    }
//
//    public TransactionHistory inputSell(ArrayList<Product> p){
//        printType(p);
//        System.out.println("Nh·∫≠p id s·∫£n ph·∫©m mu·ªën xu·∫•t ƒëi");
//        String id = sc.nextLine();
//        if ( chooseID(p,id) != null) {
//            chooseID(p,id);
//            System.out.println("S·ªë l∆∞·ª£ng xu·∫•t ƒëi ");
//            int a = Integer.parseInt(sc.nextLine());
//
//            int amount =chooseID(p, id).getInventoryNumber() - a;
//
//            if (amount <0){
//                System.out.println("Kh√¥ng ƒë·ªß s·∫£n ph·∫©m ƒë·ªÉ xu·∫•t ƒëi");
//            }
//            else {
//                chooseID(p, id).setInventoryNumber(amount);
//                System.out.println("S·∫£n ph·∫©m c√≤n l·∫°i ");
//                System.out.println(chooseID(p,id));
//
//                long money =((long) a *  chooseID(p, id).getSellPrice());
//                return new TransactionHistory("Xu·∫•t __ ",chooseID(p, id).getId(),chooseID(p, id).getName(),LocalDate.now(),a,"S·ªë ti·ªÅn thu ƒë∆∞·ª£c : ",money);
//            }
//            return null;}
//
//        else {
//            System.out.println("kh√¥ng th·∫•y s·∫£n ph·∫©m ph√π h·ª£p");
//        }
//        return null;
//    }
//
//    public void sell(ArrayList<Product> p){
//        TransactionHistory add = inputSell(p);
//        histories.add(add);
//    }
//
//    public void printHistory() {
//        System.out.println("L·ªãch s·ª≠ giao d·ªãch : ");
//        for (TransactionHistory s : histories
//        ) {
//            System.out.println(s);
//        }
//        System.out.println("...");
//    }



}
